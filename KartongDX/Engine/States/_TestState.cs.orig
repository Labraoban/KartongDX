using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using KartongDX.Resources;
using D3D11 = SharpDX.Direct3D11;
using KartongDX.Resources.Types;
using KartongDX.Rendering;
using SharpDX;

namespace KartongDX.Engine.States
{
    class _TestState : GameState
    {
        private GameObject testObject;
        private GameObject sphere;
        private GameObject testUI;

        public _TestState() : base("TestState")
        {
            testObject = new GameObject();
            testObject.SetPosition(new SharpDX.Vector3(-5, 0, -2));

            sphere = new GameObject();
            sphere.Name = "Sphere";

            testUI = new GameObject();

            stateScene.AddObjectAsRootChild(testObject);
            stateScene.AddObjectAsRootChild(sphere);
            uiScene.AddObjectAsRootChild(testUI);


        }

        public override void Load(ResourceManager resourceManager, SharpDX.Direct3D11.Device device)
        {
            resourceManager.Textures.Load(new Texture2DResourceDescription("data/textures/test/RedOctFloor_basecolor.png", "Diffuse", device));
            resourceManager.Textures.Load(new Texture2DResourceDescription("data/textures/env.jpg", "Enviroment", device));
            resourceManager.Textures.Load(new Texture2DResourceDescription("data/textures/test/RedOctFloor_normal.png", "Normal", device));
            resourceManager.Textures.Load(new Texture2DResourceDescription("data/textures/plain_normal.png", "PlainNormal", device));


            resourceManager.Meshes.Load(new MeshResourceDescription("data/models/monkey_high.fbx", "MonkeyHigh"));
            resourceManager.Meshes.Load(new MeshResourceDescription("data/models/monkey_smooth.fbx", "Monkey"));
            resourceManager.Meshes.Load(new MeshResourceDescription("data/models/barrel.fbx", "Barrel"));
            resourceManager.Meshes.Load(new MeshResourceDescription("data/models/sphere.fbx", "Sphere"));
<<<<<<< HEAD

            resourceManager.Shaders.Load(new ShaderResourceDescription("data/shaders/testShader_PBR.hlsl", "PBR", device));
=======
            resourceManager.Shaders.Load(new ShaderResourceDescription("data/shaders/testShader.hlsl", "TestShader", device));
            resourceManager.Shaders.Load(new ShaderResourceDescription("data/shaders/testShader_PBR_2.hlsl", "PBR", device));
>>>>>>> eb02e42ee182a05022cc07b78423b28f5e8a6319
            resourceManager.Shaders.Load(new ShaderResourceDescription("data/shaders/ui.hlsl", "UI", device));


            resourceManager.Textures.Load(new Texture2DResourceDescription("data/textures/cube.jpg", "Sky", device));
            resourceManager.Meshes.Load(new MeshResourceDescription("data/models/skybox.fbx", "Sky"));
            resourceManager.Shaders.Load(new ShaderResourceDescription("data/shaders/skybox.hlsl", "Sky", device));
        }


        public override void Init(ResourceManager resourceManager)
        {
            Material pbrMat = new Rendering.Material(resourceManager.Shaders.GetFromAlias("PBR").Shader);
            Material uiMat = new Rendering.Material(resourceManager.Shaders.GetFromAlias("UI").Shader);
            Material skyMat = new Rendering.Material(resourceManager.Shaders.GetFromAlias("Sky").Shader);

<<<<<<< HEAD
            pbrMat.AddTextureMap(Rendering.TextureMap.Diffuse, resourceManager.Textures.GetFromAlias("Diffuse").Texture2D);
            pbrMat.AddTextureMap(Rendering.TextureMap.Normal, resourceManager.Textures.GetFromAlias("Normal").Texture2D);
=======
            pbrMat.AddTextureMap(Rendering.TextureMap.Diffuse, resourceManager.Textures.GetFromAlias("Enviroment").Texture2D);
            pbrMat.AddTextureMap(Rendering.TextureMap.Normal, resourceManager.Textures.GetFromAlias("PlainNormal").Texture2D);
>>>>>>> eb02e42ee182a05022cc07b78423b28f5e8a6319

            uiMat.AddTextureMap(Rendering.TextureMap.Diffuse, resourceManager.Textures.GetFromAlias("Diffuse").Texture2D);
            uiMat.AddTextureMap(Rendering.TextureMap.Normal, resourceManager.Textures.GetFromAlias("Normal").Texture2D);

            skyMat.AddTextureMap(Rendering.TextureMap.Diffuse, resourceManager.Textures.GetFromAlias("Sky").Texture2D);
            skyMat.AddTextureMap(Rendering.TextureMap.Normal, resourceManager.Textures.GetFromAlias("PlainNormal").Texture2D);

<<<<<<< HEAD

            Rendering.Model monkeyModel = new Rendering.Model(resourceManager.Meshes.GetFromAlias("Barrel").Mesh, pbrMat);
=======
            Rendering.Model monkeyModel = new Rendering.Model(resourceManager.Meshes.GetFromAlias("Monkey").Mesh, pbrMat);
>>>>>>> eb02e42ee182a05022cc07b78423b28f5e8a6319
            Rendering.Model sphereModel = new Rendering.Model(resourceManager.Meshes.GetFromAlias("Sphere").Mesh, pbrMat);
            Rendering.Model skyModel = new Rendering.Model(resourceManager.Meshes.GetFromAlias("Sky").Mesh, skyMat);

            sphere.Components.Create<ComponentSystem._ModelComponent>();
            sphere.Components.Get<ComponentSystem._ModelComponent>().Model = sphereModel;

            testObject.Components.Create<ComponentSystem._ModelComponent>();
            testObject.Components.Get<ComponentSystem._ModelComponent>().Model = monkeyModel;

            testUI.Components.Create<ComponentSystem._ModelComponent>();
            testUI.Components.Get<ComponentSystem._ModelComponent>().Model = new Rendering.UI.UIRect(new RectangleF(3, 0, 256, 256), uiMat);

            stateScene.Skybox.Components.Create<ComponentSystem._ModelComponent>();
            stateScene.Skybox.Components.Get<ComponentSystem._ModelComponent>().Model = skyModel;
        }

        public override void Update(GameTime gameTime)
        {
            base.Update(gameTime);

            float speed = 50.0f;

            testObject.SetEulerRotation(new Vector3(180, (speed * gameTime.Time) % 360.0f, 0));
            sphere.SetEulerRotation(new Vector3((speed * gameTime.Time) % 360.0f, 0, 0));
        }
    }
}
